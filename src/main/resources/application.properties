#
#server.port = 8080
## MySQL ??
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
## DB Source URL
#spring.datasource.url=jdbc:mysql://172.23.48.1:3306/securityexam
#
## DB username
#spring.datasource.username=seongmin
#
## DB password
#spring.datasource.password=seongmin
#
## true ??? JPA ??? ?? ??
##spring.jpa.show-sql=true
#
## DDL(create, alter, drop) ??? DB? ?? ??? ??? ? ??.
#spring.jpa.hibernate.ddl-auto=none
#
## JPA? ???? Hibernate? ????? ??? SQL? ???? ????.
#spring.jpa.properties.hibernate.format_sql=true
#
## devtools static source ??? ?? ??? ??
#spring.devtools.livereload.enabled=true
#spring.freemarker.cache=false
#spring.thymeleaf.cache=false
#
## log config
##logging.level.com.example.springsecurityexam = debug
##
### properties
##kakao_properties=classpath:META-INF/oAuthProperties/kakao.properties
##
##kakao.client_id = 607142d2d7fe229e0ca1fecf63974ab7
##
### kakao oauth2.0
##spring.security.oauth2.client.registration.kakao.client-id = 607142d2d7fe229e0ca1fecf63974ab7
##spring.security.oauth2.client.registration.kakao.scope = profile_nickname, account_email
##spring.security.oauth2.client.registration.kakao.client-name = Kakao
##spring.security.oauth2.client.registration.kakao.authorization-grant-type = authorization_code
##spring.security.oauth2.client.registration.kakao.redirect-uri = http://localhost:8080/login/oauth2/code/kakao
##spring.security.oauth2.client.registration.kakao.client-authentication-method = POST
##
##spring.security.oauth2.client.provider.kakao.authorization-uri = https://kauth.kakao.com/oauth/authorize
##spring.security.oauth2.client.provider.kakao.token-uri = https://kauth.kakao.com/oauth/token
##spring.security.oauth2.client.provider.kakao.user-info-uri = https://kapi.kakao.com/v2/user/me
##spring.security.oauth2.client.provider.kakao.user-name-attribute = id
##
### google oauth2.0
##spring.security.oauth2.client.registration.google.client-id = 375732811000-61kbdijp1takapqfcpj60qm5dnko2a7d.apps.googleusercontent.com
##spring.security.oauth2.client.registration.google.client-secret = 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
##spring.security.oauth2.client.registration.google.scope = profile, email
##
### naver oauth2.0
##spring.security.oauth2.client.registration.naver.client-id = OpsixB5X9rb3NyL5NjLN
##spring.security.oauth2.client.registration.naver.client-secret = UuB0JW7ytp
##spring.security.oauth2.client.registration.naver.scope = name, email
##spring.security.oauth2.client.registration.naver.client-name = Naver
##spring.security.oauth2.client.registration.naver.authorization-grant-type = authorization_code
##spring.security.oauth2.client.registration.naver.redirect-uri = http://localhost:8080/login/oauth2/code/naver
##
##spring.security.oauth2.client.provider.naver.authorization-uri = https://nid.naver.com/oauth2.0/authorize
##spring.security.oauth2.client.provider.naver.token-uri = https://nid.naver.com/oauth2.0/token
##spring.security.oauth2.client.provider.naver.user-info-uri = https://openapi.naver.com/v1/nid/me
##spring.security.oauth2.client.provider.naver.user-name-attribute = response
##
### jwt key
##jwt.access_secret_key = access_key_seongmin
##jwt.refresh_secret_key = refresh_key_seongmin
##
##jwt.access_expire_time = 3000000
##jwt.refresh_expire_time = 6000000
##
##jwt.access_token_name = X-AUTH-TOKEN
##jwt.refresh_token_name = RE-AUTH-TOKEN
##
##jwt.issuer = seongmin
##
###jSessionId cookie ??
##server.session.tracking-modes=cookie
##
##spring.messages.basename=messages, errors